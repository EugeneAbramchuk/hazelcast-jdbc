package com.hazelcast.jdbc;

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.internal.util.Preconditions;
import com.hazelcast.sql.SqlResult;
import com.hazelcast.sql.SqlStatement;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.Collections;
import java.util.List;

class HazelcastJdbcStatement implements Statement {

    /** Query timeout. */
    private Duration queryTimeout = Duration.ZERO;

    /** Fetch size. */
    private int fetchSize;

    /** Whether the statement is closed. */
    private boolean closed;

    /** Poolable flag. */
    private boolean poolable;

    /** Fetch direction hint. */
    private int fetchDirection = ResultSet.FETCH_FORWARD;

    /** Current result as an update cound */
    private int updateCount = -1;

    ResultSet resultSet;

    private final HazelcastInstance client;
    private final Connection connection;

    HazelcastJdbcStatement(HazelcastInstance client, Connection connection) {
        this.client = client;
        this.connection = connection;
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        doExecute(sql, Collections.emptyList());
        return resultSet;
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        checkClosed();
        throw unsupportedAutoGeneratedKeys();
    }

    @Override
    public void close() throws SQLException {
        if (!isClosed()) {
            closed = true;
            if (resultSet != null) {
                resultSet.close();
                resultSet = null;
            }
        }
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        checkClosed();
        return 0;
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        checkClosed();
    }

    @Override
    public int getMaxRows() throws SQLException {
        checkClosed();
        return 0;
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        checkClosed();
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        checkClosed();
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        checkClosed();
        return Math.toIntExact(queryTimeout.getSeconds());
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        checkClosed();
        Preconditions.checkPositive("Timeout", seconds);
        this.queryTimeout = Duration.ofSeconds(seconds);
    }

    @Override
    public void cancel() throws SQLException {
        throw JdbcUtils.unsupported("Cancelation is not supported");
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        checkClosed();
        return null;
    }

    @Override
    public void clearWarnings() throws SQLException {
        checkClosed();
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        throw JdbcUtils.unsupported("Cursor Name is not supported");
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        checkClosed();
        doExecute(sql, Collections.emptyList());
        return true;
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        checkClosed();

        if (updateCount != -1) {
            return null;
        }
        return resultSet;
    }

    @Override
    public int getUpdateCount() throws SQLException {
        checkClosed();
        return updateCount;
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        checkClosed();
        return false;
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        checkClosed();
        switch (direction) {
            case ResultSet.FETCH_FORWARD:
            case ResultSet.FETCH_REVERSE:
            case ResultSet.FETCH_UNKNOWN:
                this.fetchDirection = direction;
                break;
            default:
                throw new SQLException("Invalid fetch direction value: " + direction);
        }
    }

    @Override
    public int getFetchDirection() throws SQLException {
        checkClosed();
        return fetchDirection;
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        checkClosed();
        this.fetchSize = rows;
    }

    @Override
    public int getFetchSize() throws SQLException {
        checkClosed();
        return fetchSize;
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        checkClosed();
        return ResultSet.CONCUR_READ_ONLY;
    }

    @Override
    public int getResultSetType() throws SQLException {
        checkClosed();
        return ResultSet.TYPE_FORWARD_ONLY;
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        throw  unsupportedBatch();
    }

    @Override
    public void clearBatch() throws SQLException {
        throw  unsupportedBatch();
    }

    @Override
    public int[] executeBatch() throws SQLException {
        throw  unsupportedBatch();
    }

    @Override
    public Connection getConnection() throws SQLException {
        checkClosed();
        return connection;
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        checkClosed();
        return false;
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        throw JdbcUtils.unsupported("Generated Keys are not supported");
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        checkClosed();
        throw unsupportedAutoGeneratedKeys();
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        checkClosed();
        throw unsupportedAutoGeneratedKeys();
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        checkClosed();
        throw unsupportedAutoGeneratedKeys();
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        checkClosed();
        throw unsupportedAutoGeneratedKeys();
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        checkClosed();
        throw unsupportedAutoGeneratedKeys();
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        checkClosed();
        throw unsupportedAutoGeneratedKeys();
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        checkClosed();
        return ResultSet.CLOSE_CURSORS_AT_COMMIT;
    }

    @Override
    public boolean isClosed() throws SQLException {
        return closed;
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        checkClosed();
        this.poolable = poolable;
    }

    @Override
    public boolean isPoolable() throws SQLException {
        checkClosed();
        return poolable;
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        checkClosed();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        checkClosed();
        return false;
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        return JdbcUtils.unwrap(this, iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return JdbcUtils.isWrapperFor(this, iface);
    }

    protected void doExecute(String sql, List<Object> parameters) throws SQLException {
        checkClosed();

        SqlStatement query = new SqlStatement(sql).setParameters(parameters);
        if (!queryTimeout.isZero()) {
            query.setTimeoutMillis(queryTimeout.get(ChronoUnit.MILLIS));
        }
        if (fetchSize != 0) {
            query.setCursorBufferSize(fetchSize);
        }
        SqlResult sqlResult = client.getSql().execute(query);
        resultSet = new HazelcastJdbcResultSet(sqlResult);
    }

    private void checkClosed() throws SQLException {
        if (isClosed()) {
            throw new SQLException("Statement is closed", "STATE", -1);
        }
    }

    private SQLException unsupportedBatch() {
        return JdbcUtils.unsupported("Batch updates is not supported");
    }

    private SQLFeatureNotSupportedException unsupportedAutoGeneratedKeys() throws SQLException {
        return JdbcUtils.unsupported("Auto-generated keys are not supported.");
    }
}
